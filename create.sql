create sequence SEQ_FORCEDID_ID start with 1 increment by 50;
create sequence SEQ_HISTORYTAG_ID start with 1 increment by 50;
create sequence SEQ_IDXCMBTOKNU_ID start with 1 increment by 50;
create sequence SEQ_IDXCMPSTRUNIQ_ID start with 1 increment by 50;
create sequence SEQ_RESLINK_ID start with 1 increment by 50;
create sequence SEQ_RESOURCE_HISTORY_ID start with 1 increment by 50;
create sequence SEQ_RESOURCE_ID start with 1 increment by 50;
create sequence SEQ_RESPARMPRESENT_ID start with 1 increment by 50;
create sequence SEQ_RESTAG_ID start with 1 increment by 50;
create sequence SEQ_SPIDX_COORDS start with 1 increment by 50;
create sequence SEQ_SPIDX_DATE start with 1 increment by 50;
create sequence SEQ_SPIDX_NUMBER start with 1 increment by 50;
create sequence SEQ_SPIDX_QUANTITY start with 1 increment by 50;
create sequence SEQ_SPIDX_QUANTITY_NRML start with 1 increment by 50;
create sequence SEQ_SPIDX_STRING start with 1 increment by 50;
create sequence SEQ_SPIDX_TOKEN start with 1 increment by 50;
create sequence SEQ_SPIDX_URI start with 1 increment by 50;
create sequence SEQ_TAGDEF_ID start with 1 increment by 50;
create table HFJ_FORCED_ID (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RESOURCE_PID number(19,0) not null, FORCED_ID varchar2(100 char) not null, RESOURCE_TYPE varchar2(100 char) default '', primary key (PID), constraint IDX_FORCEDID_RESID unique (RESOURCE_PID), constraint IDX_FORCEDID_TYPE_FID unique (RESOURCE_TYPE, FORCED_ID));
create table HFJ_HISTORY_TAG (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RES_ID number(19,0) not null, RES_VER_PID number(19,0) not null, TAG_ID number(19,0), RES_TYPE varchar2(40 char) not null, primary key (PID), constraint IDX_RESHISTTAG_TAGID unique (RES_VER_PID, TAG_ID));
create table HFJ_IDX_CMB_TOK_NU (PARTITION_DATE date, PARTITION_ID number(10,0), HASH_COMPLETE number(19,0) not null, PID number(19,0) not null, RES_ID number(19,0), IDX_STRING varchar2(500 char) not null, primary key (PID));
create table HFJ_IDX_CMP_STRING_UNIQ (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RES_ID number(19,0), IDX_STRING varchar2(500 char) not null, primary key (PID), constraint IDX_IDXCMPSTRUNIQ_STRING unique (IDX_STRING));
create table HFJ_RES_LINK (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, SP_UPDATED timestamp(6), SRC_RESOURCE_ID number(19,0) not null, TARGET_RESOURCE_ID number(19,0), TARGET_RESOURCE_VERSION number(19,0), SOURCE_RESOURCE_TYPE varchar2(40 char) not null, TARGET_RESOURCE_TYPE varchar2(40 char) not null, TARGET_RESOURCE_URL varchar2(200 char), SRC_PATH varchar2(500 char) not null, primary key (PID));
create table HFJ_RES_PARAM_PRESENT (PARTITION_DATE date, PARTITION_ID number(10,0), SP_PRESENT number(1,0) not null check (SP_PRESENT in (0,1)), HASH_PRESENCE number(19,0), PID number(19,0) not null, RES_ID number(19,0) not null, primary key (PID));
create table HFJ_RES_SEARCH_URL (CREATED_TIME timestamp(6) not null, RES_ID number(19,0) not null, RES_SEARCH_URL varchar2(768 char) not null, primary key (RES_SEARCH_URL));
create table HFJ_RES_TAG (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RES_ID number(19,0), TAG_ID number(19,0), RES_TYPE varchar2(40 char) not null, primary key (PID), constraint IDX_RESTAG_TAGID unique (RES_ID, TAG_ID));
create table HFJ_RES_VER (HAS_TAGS number(1,0) not null check (HAS_TAGS in (0,1)), PARTITION_DATE date, PARTITION_ID number(10,0), RES_ENCODING varchar2(5 char) not null check (RES_ENCODING in ('JSON','JSONC','DEL','ESR')), RES_VERSION varchar2(7 char) check (RES_VERSION in ('DSTU2','DSTU2_HL7ORG','DSTU2_1','DSTU3','R4','R4B','R5')), PID number(19,0) not null, RES_DELETED_AT timestamp(6), RES_ID number(19,0) not null, RES_PUBLISHED timestamp(6) not null, RES_UPDATED timestamp(6) not null, RES_VER number(19,0) not null, REQUEST_ID varchar2(16 char), RES_TYPE varchar2(40 char) not null, SOURCE_URI varchar2(100 char), RES_TEXT_VC clob, RES_TEXT blob, primary key (PID), constraint IDX_RESVER_ID_VER unique (RES_ID, RES_VER));
create table HFJ_RES_VER_PROV (PARTITION_DATE date, PARTITION_ID number(10,0), RES_PID number(19,0) not null, RES_VER_PID number(19,0) not null, REQUEST_ID varchar2(16 char), SOURCE_URI varchar2(100 char), primary key (RES_VER_PID));
create table HFJ_RESOURCE (HAS_TAGS number(1,0) not null check (HAS_TAGS in (0,1)), PARTITION_DATE date, PARTITION_ID number(10,0), SEARCH_URL_PRESENT number(1,0) check (SEARCH_URL_PRESENT in (0,1)), SP_CMPSTR_UNIQ_PRESENT number(1,0) check (SP_CMPSTR_UNIQ_PRESENT in (0,1)), SP_CMPTOKS_PRESENT number(1,0) check (SP_CMPTOKS_PRESENT in (0,1)), SP_COORDS_PRESENT number(1,0) check (SP_COORDS_PRESENT in (0,1)), SP_DATE_PRESENT number(1,0) check (SP_DATE_PRESENT in (0,1)), SP_HAS_LINKS number(1,0) check (SP_HAS_LINKS in (0,1)), SP_NUMBER_PRESENT number(1,0) check (SP_NUMBER_PRESENT in (0,1)), SP_QUANTITY_NRML_PRESENT number(1,0) check (SP_QUANTITY_NRML_PRESENT in (0,1)), SP_QUANTITY_PRESENT number(1,0) check (SP_QUANTITY_PRESENT in (0,1)), SP_STRING_PRESENT number(1,0) check (SP_STRING_PRESENT in (0,1)), SP_TOKEN_PRESENT number(1,0) check (SP_TOKEN_PRESENT in (0,1)), SP_URI_PRESENT number(1,0) check (SP_URI_PRESENT in (0,1)), RES_VERSION varchar2(7 char) check (RES_VERSION in ('DSTU2','DSTU2_HL7ORG','DSTU2_1','DSTU3','R4','R4B','R5')), RES_DELETED_AT timestamp(6), RES_ID number(19,0) not null, RES_PUBLISHED timestamp(6) not null, RES_UPDATED timestamp(6) not null, RES_VER number(19,0), SP_INDEX_STATUS number(19,0), RES_LANGUAGE varchar2(20 char), RES_TYPE varchar2(40 char) not null, FHIR_ID varchar2(64 char), HASH_SHA256 varchar2(64 char), primary key (RES_ID));
create table HFJ_RESOURCE_MODIFIED (CREATED_TIME timestamp(6) not null, RES_VER varchar2(8 char) not null, RESOURCE_TYPE varchar2(40 char) not null, RES_ID varchar2(256 char) not null, SUMMARY_MESSAGE varchar2(4000 char) not null, primary key (RES_VER, RES_ID));
create table HFJ_SPIDX_COORDS (PARTITION_DATE date, PARTITION_ID number(10,0), SP_LATITUDE float(53), SP_LONGITUDE float(53), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_IDENTITY number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, primary key (SP_ID));
create table HFJ_SPIDX_DATE (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE_HIGH_DATE_ORDINAL number(10,0), SP_VALUE_LOW_DATE_ORDINAL number(10,0), HASH_IDENTITY number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), SP_VALUE_HIGH timestamp(6), SP_VALUE_LOW timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, primary key (SP_ID));
create table HFJ_SPIDX_NUMBER (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE number(38,2), HASH_IDENTITY number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, primary key (SP_ID));
create table HFJ_SPIDX_QUANTITY (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE float(53), HASH_IDENTITY number(19,0), HASH_IDENTITY_AND_UNITS number(19,0), HASH_IDENTITY_SYS_UNITS number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_SYSTEM varchar2(200 char), SP_UNITS varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_QUANTITY_NRML (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE float(53), HASH_IDENTITY number(19,0), HASH_IDENTITY_AND_UNITS number(19,0), HASH_IDENTITY_SYS_UNITS number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_SYSTEM varchar2(200 char), SP_UNITS varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_STRING (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_EXACT number(19,0), HASH_IDENTITY number(19,0), HASH_NORM_PREFIX number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_VALUE_EXACT varchar2(200 char), SP_VALUE_NORMALIZED varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_TOKEN (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_IDENTITY number(19,0), HASH_SYS number(19,0), HASH_SYS_AND_VALUE number(19,0), HASH_VALUE number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_SYSTEM varchar2(200 char), SP_VALUE varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_URI (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_IDENTITY number(19,0), HASH_URI number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_URI varchar2(500 char), primary key (SP_ID), constraint IDX_SP_URI_HASH_URI_V2 unique (HASH_URI, RES_ID, PARTITION_ID), constraint IDX_SP_URI_HASH_IDENTITY_V2 unique (HASH_IDENTITY, SP_URI, RES_ID, PARTITION_ID));
create table HFJ_TAG_DEF (TAG_TYPE number(3,0) not null check (TAG_TYPE between 0 and 2), TAG_USER_SELECTED number(1,0) check (TAG_USER_SELECTED in (0,1)), TAG_ID number(19,0) not null, TAG_VERSION varchar2(30 char), TAG_CODE varchar2(200 char), TAG_DISPLAY varchar2(200 char), TAG_SYSTEM varchar2(200 char), primary key (TAG_ID));
create index IDX_FORCEID_FID on HFJ_FORCED_ID (FORCED_ID);
create index IDX_RESHISTTAG_RESID on HFJ_HISTORY_TAG (RES_ID);
create index IDX_IDXCMBTOKNU_STR on HFJ_IDX_CMB_TOK_NU (IDX_STRING);
create index IDX_IDXCMBTOKNU_RES on HFJ_IDX_CMB_TOK_NU (RES_ID);
create index IDX_IDXCMPSTRUNIQ_RESOURCE on HFJ_IDX_CMP_STRING_UNIQ (RES_ID);
create index IDX_RL_SRC on HFJ_RES_LINK (SRC_RESOURCE_ID);
create index IDX_RL_TGT_v2 on HFJ_RES_LINK (TARGET_RESOURCE_ID, SRC_PATH, SRC_RESOURCE_ID, TARGET_RESOURCE_TYPE, PARTITION_ID);
create index IDX_RESPARMPRESENT_RESID on HFJ_RES_PARAM_PRESENT (RES_ID);
create index IDX_RESPARMPRESENT_HASHPRES on HFJ_RES_PARAM_PRESENT (HASH_PRESENCE);
create index IDX_RESSEARCHURL_RES on HFJ_RES_SEARCH_URL (RES_ID);
create index IDX_RESSEARCHURL_TIME on HFJ_RES_SEARCH_URL (CREATED_TIME);
create index IDX_RES_TAG_RES_TAG on HFJ_RES_TAG (RES_ID, TAG_ID, PARTITION_ID);
create index IDX_RES_TAG_TAG_RES on HFJ_RES_TAG (TAG_ID, RES_ID, PARTITION_ID);
create index IDX_RESVER_TYPE_DATE on HFJ_RES_VER (RES_TYPE, RES_UPDATED);
create index IDX_RESVER_ID_DATE on HFJ_RES_VER (RES_ID, RES_UPDATED);
create index IDX_RESVER_DATE on HFJ_RES_VER (RES_UPDATED);
create index IDX_RESVERPROV_SOURCEURI on HFJ_RES_VER_PROV (SOURCE_URI);
create index IDX_RESVERPROV_REQUESTID on HFJ_RES_VER_PROV (REQUEST_ID);
create index IDX_RESVERPROV_RES_PID on HFJ_RES_VER_PROV (RES_PID);
create index IDX_RES_DATE on HFJ_RESOURCE (RES_UPDATED);
create index IDX_RES_TYPE_DEL_UPDATED on HFJ_RESOURCE (RES_TYPE, RES_DELETED_AT, RES_UPDATED, PARTITION_ID, RES_ID);
create index IDX_RES_RESID_UPDATED on HFJ_RESOURCE (RES_ID, RES_UPDATED, PARTITION_ID);
create index IDX_SP_COORDS_HASH_V2 on HFJ_SPIDX_COORDS (HASH_IDENTITY, SP_LATITUDE, SP_LONGITUDE, RES_ID, PARTITION_ID);
create index IDX_SP_COORDS_UPDATED on HFJ_SPIDX_COORDS (SP_UPDATED);
create index IDX_SP_COORDS_RESID on HFJ_SPIDX_COORDS (RES_ID);
create index IDX_SP_DATE_HASH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_LOW, SP_VALUE_HIGH, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_HASH_HIGH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_HIGH, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_ORD_HASH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_LOW_DATE_ORDINAL, SP_VALUE_HIGH_DATE_ORDINAL, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_ORD_HASH_HIGH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_HIGH_DATE_ORDINAL, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_RESID_V2 on HFJ_SPIDX_DATE (RES_ID, HASH_IDENTITY, SP_VALUE_LOW, SP_VALUE_HIGH, SP_VALUE_LOW_DATE_ORDINAL, SP_VALUE_HIGH_DATE_ORDINAL, PARTITION_ID);
create index IDX_SP_NUMBER_HASH_VAL_V2 on HFJ_SPIDX_NUMBER (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_NUMBER_RESID_V2 on HFJ_SPIDX_NUMBER (RES_ID, HASH_IDENTITY, SP_VALUE, PARTITION_ID);
create index IDX_SP_QUANTITY_HASH_V2 on HFJ_SPIDX_QUANTITY (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QUANTITY_HASH_UN_V2 on HFJ_SPIDX_QUANTITY (HASH_IDENTITY_AND_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QUANTITY_HASH_SYSUN_V2 on HFJ_SPIDX_QUANTITY (HASH_IDENTITY_SYS_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QUANTITY_RESID_V2 on HFJ_SPIDX_QUANTITY (RES_ID, HASH_IDENTITY, HASH_IDENTITY_SYS_UNITS, HASH_IDENTITY_AND_UNITS, SP_VALUE, PARTITION_ID);
create index IDX_SP_QNTY_NRML_HASH_V2 on HFJ_SPIDX_QUANTITY_NRML (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QNTY_NRML_HASH_UN_V2 on HFJ_SPIDX_QUANTITY_NRML (HASH_IDENTITY_AND_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QNTY_NRML_HASH_SYSUN_V2 on HFJ_SPIDX_QUANTITY_NRML (HASH_IDENTITY_SYS_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QNTY_NRML_RESID_V2 on HFJ_SPIDX_QUANTITY_NRML (RES_ID, HASH_IDENTITY, HASH_IDENTITY_SYS_UNITS, HASH_IDENTITY_AND_UNITS, SP_VALUE, PARTITION_ID);
create index IDX_SP_STRING_HASH_IDENT_V2 on HFJ_SPIDX_STRING (HASH_IDENTITY, RES_ID, PARTITION_ID);
create index IDX_SP_STRING_HASH_NRM_V2 on HFJ_SPIDX_STRING (HASH_NORM_PREFIX, SP_VALUE_NORMALIZED, RES_ID, PARTITION_ID);
create index IDX_SP_STRING_HASH_EXCT_V2 on HFJ_SPIDX_STRING (HASH_EXACT, RES_ID, PARTITION_ID);
create index IDX_SP_STRING_RESID_V2 on HFJ_SPIDX_STRING (RES_ID, HASH_NORM_PREFIX, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_V2 on HFJ_SPIDX_TOKEN (HASH_IDENTITY, SP_SYSTEM, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_S_V2 on HFJ_SPIDX_TOKEN (HASH_SYS, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_SV_V2 on HFJ_SPIDX_TOKEN (HASH_SYS_AND_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_V_V2 on HFJ_SPIDX_TOKEN (HASH_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_RESID_V2 on HFJ_SPIDX_TOKEN (RES_ID, HASH_SYS_AND_VALUE, HASH_VALUE, HASH_SYS, HASH_IDENTITY, PARTITION_ID);
create index IDX_SP_URI_COORDS on HFJ_SPIDX_URI (RES_ID);
create index IDX_TAG_DEF_TP_CD_SYS on HFJ_TAG_DEF (TAG_TYPE, TAG_CODE, TAG_SYSTEM, TAG_ID, TAG_VERSION, TAG_USER_SELECTED);
alter table HFJ_FORCED_ID add constraint FK_FORCEDID_RESOURCE foreign key (RESOURCE_PID) references HFJ_RESOURCE;
alter table HFJ_HISTORY_TAG add constraint FKtderym7awj6q8iq5c51xv4ndw foreign key (TAG_ID) references HFJ_TAG_DEF;
alter table HFJ_HISTORY_TAG add constraint FK_HISTORYTAG_HISTORY foreign key (RES_VER_PID) references HFJ_RES_VER;
alter table HFJ_IDX_CMB_TOK_NU add constraint FK_IDXCMBTOKNU_RES_ID foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_IDX_CMP_STRING_UNIQ add constraint FK_IDXCMPSTRUNIQ_RES_ID foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_LINK add constraint FK_RESLINK_SOURCE foreign key (SRC_RESOURCE_ID) references HFJ_RESOURCE;
alter table HFJ_RES_LINK add constraint FK_RESLINK_TARGET foreign key (TARGET_RESOURCE_ID) references HFJ_RESOURCE;
alter table HFJ_RES_PARAM_PRESENT add constraint FK_RESPARMPRES_RESID foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_TAG add constraint FKbfcjbaftmiwr3rxkwsy23vneo foreign key (TAG_ID) references HFJ_TAG_DEF;
alter table HFJ_RES_TAG add constraint FK_RESTAG_RESOURCE foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_VER add constraint FK_RESOURCE_HISTORY_RESOURCE foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_VER_PROV add constraint FK_RESVERPROV_RES_PID foreign key (RES_PID) references HFJ_RESOURCE;
alter table HFJ_RES_VER_PROV add constraint FK_RESVERPROV_RESVER_PID foreign key (RES_VER_PID) references HFJ_RES_VER;
alter table HFJ_SPIDX_COORDS add constraint FKC97MPK37OKWU8QVTCEG2NH9VN foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_DATE add constraint FK_SP_DATE_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_NUMBER add constraint FK_SP_NUMBER_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_QUANTITY add constraint FK_SP_QUANTITY_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_QUANTITY_NRML add constraint FK_SP_QUANTITYNM_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_STRING add constraint FK_SPIDXSTR_RESOURCE foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_TOKEN add constraint FK_SP_TOKEN_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_URI add constraint FKGXSREUTYMMFJUWDSWV3Y887DO foreign key (RES_ID) references HFJ_RESOURCE;
create sequence SEQ_FORCEDID_ID start with 1 increment by 50;
create sequence SEQ_HISTORYTAG_ID start with 1 increment by 50;
create sequence SEQ_IDXCMBTOKNU_ID start with 1 increment by 50;
create sequence SEQ_IDXCMPSTRUNIQ_ID start with 1 increment by 50;
create sequence SEQ_RESLINK_ID start with 1 increment by 50;
create sequence SEQ_RESOURCE_HISTORY_ID start with 1 increment by 50;
create sequence SEQ_RESOURCE_ID start with 1 increment by 50;
create sequence SEQ_RESPARMPRESENT_ID start with 1 increment by 50;
create sequence SEQ_RESTAG_ID start with 1 increment by 50;
create sequence SEQ_SPIDX_COORDS start with 1 increment by 50;
create sequence SEQ_SPIDX_DATE start with 1 increment by 50;
create sequence SEQ_SPIDX_NUMBER start with 1 increment by 50;
create sequence SEQ_SPIDX_QUANTITY start with 1 increment by 50;
create sequence SEQ_SPIDX_QUANTITY_NRML start with 1 increment by 50;
create sequence SEQ_SPIDX_STRING start with 1 increment by 50;
create sequence SEQ_SPIDX_TOKEN start with 1 increment by 50;
create sequence SEQ_SPIDX_URI start with 1 increment by 50;
create sequence SEQ_TAGDEF_ID start with 1 increment by 50;
create table HFJ_FORCED_ID (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RESOURCE_PID number(19,0) not null, FORCED_ID varchar2(100 char) not null, RESOURCE_TYPE varchar2(100 char) default '', primary key (PID), constraint IDX_FORCEDID_RESID unique (RESOURCE_PID), constraint IDX_FORCEDID_TYPE_FID unique (RESOURCE_TYPE, FORCED_ID));
create table HFJ_HISTORY_TAG (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RES_ID number(19,0) not null, RES_VER_PID number(19,0) not null, TAG_ID number(19,0), RES_TYPE varchar2(40 char) not null, primary key (PID), constraint IDX_RESHISTTAG_TAGID unique (RES_VER_PID, TAG_ID));
create table HFJ_IDX_CMB_TOK_NU (PARTITION_DATE date, PARTITION_ID number(10,0), HASH_COMPLETE number(19,0) not null, PID number(19,0) not null, RES_ID number(19,0), IDX_STRING varchar2(500 char) not null, primary key (PID));
create table HFJ_IDX_CMP_STRING_UNIQ (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RES_ID number(19,0), IDX_STRING varchar2(500 char) not null, primary key (PID), constraint IDX_IDXCMPSTRUNIQ_STRING unique (IDX_STRING));
create table HFJ_RES_LINK (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, SP_UPDATED timestamp(6), SRC_RESOURCE_ID number(19,0) not null, TARGET_RESOURCE_ID number(19,0), TARGET_RESOURCE_VERSION number(19,0), SOURCE_RESOURCE_TYPE varchar2(40 char) not null, TARGET_RESOURCE_TYPE varchar2(40 char) not null, TARGET_RESOURCE_URL varchar2(200 char), SRC_PATH varchar2(500 char) not null, primary key (PID));
create table HFJ_RES_PARAM_PRESENT (PARTITION_DATE date, PARTITION_ID number(10,0), SP_PRESENT number(1,0) not null check (SP_PRESENT in (0,1)), HASH_PRESENCE number(19,0), PID number(19,0) not null, RES_ID number(19,0) not null, primary key (PID));
create table HFJ_RES_SEARCH_URL (CREATED_TIME timestamp(6) not null, RES_ID number(19,0) not null, RES_SEARCH_URL varchar2(768 char) not null, primary key (RES_SEARCH_URL));
create table HFJ_RES_TAG (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RES_ID number(19,0), TAG_ID number(19,0), RES_TYPE varchar2(40 char) not null, primary key (PID), constraint IDX_RESTAG_TAGID unique (RES_ID, TAG_ID));
create table HFJ_RES_VER (HAS_TAGS number(1,0) not null check (HAS_TAGS in (0,1)), PARTITION_DATE date, PARTITION_ID number(10,0), RES_ENCODING varchar2(5 char) not null check (RES_ENCODING in ('JSON','JSONC','DEL','ESR')), RES_VERSION varchar2(7 char) check (RES_VERSION in ('DSTU2','DSTU2_HL7ORG','DSTU2_1','DSTU3','R4','R4B','R5')), PID number(19,0) not null, RES_DELETED_AT timestamp(6), RES_ID number(19,0) not null, RES_PUBLISHED timestamp(6) not null, RES_UPDATED timestamp(6) not null, RES_VER number(19,0) not null, REQUEST_ID varchar2(16 char), RES_TYPE varchar2(40 char) not null, SOURCE_URI varchar2(100 char), RES_TEXT_VC clob, RES_TEXT blob, primary key (PID), constraint IDX_RESVER_ID_VER unique (RES_ID, RES_VER));
create table HFJ_RES_VER_PROV (PARTITION_DATE date, PARTITION_ID number(10,0), RES_PID number(19,0) not null, RES_VER_PID number(19,0) not null, REQUEST_ID varchar2(16 char), SOURCE_URI varchar2(100 char), primary key (RES_VER_PID));
create table HFJ_RESOURCE (HAS_TAGS number(1,0) not null check (HAS_TAGS in (0,1)), PARTITION_DATE date, PARTITION_ID number(10,0), SEARCH_URL_PRESENT number(1,0) check (SEARCH_URL_PRESENT in (0,1)), SP_CMPSTR_UNIQ_PRESENT number(1,0) check (SP_CMPSTR_UNIQ_PRESENT in (0,1)), SP_CMPTOKS_PRESENT number(1,0) check (SP_CMPTOKS_PRESENT in (0,1)), SP_COORDS_PRESENT number(1,0) check (SP_COORDS_PRESENT in (0,1)), SP_DATE_PRESENT number(1,0) check (SP_DATE_PRESENT in (0,1)), SP_HAS_LINKS number(1,0) check (SP_HAS_LINKS in (0,1)), SP_NUMBER_PRESENT number(1,0) check (SP_NUMBER_PRESENT in (0,1)), SP_QUANTITY_NRML_PRESENT number(1,0) check (SP_QUANTITY_NRML_PRESENT in (0,1)), SP_QUANTITY_PRESENT number(1,0) check (SP_QUANTITY_PRESENT in (0,1)), SP_STRING_PRESENT number(1,0) check (SP_STRING_PRESENT in (0,1)), SP_TOKEN_PRESENT number(1,0) check (SP_TOKEN_PRESENT in (0,1)), SP_URI_PRESENT number(1,0) check (SP_URI_PRESENT in (0,1)), RES_VERSION varchar2(7 char) check (RES_VERSION in ('DSTU2','DSTU2_HL7ORG','DSTU2_1','DSTU3','R4','R4B','R5')), RES_DELETED_AT timestamp(6), RES_ID number(19,0) not null, RES_PUBLISHED timestamp(6) not null, RES_UPDATED timestamp(6) not null, RES_VER number(19,0), SP_INDEX_STATUS number(19,0), RES_LANGUAGE varchar2(20 char), RES_TYPE varchar2(40 char) not null, FHIR_ID varchar2(64 char), HASH_SHA256 varchar2(64 char), primary key (RES_ID));
create table HFJ_RESOURCE_MODIFIED (CREATED_TIME timestamp(6) not null, RES_VER varchar2(8 char) not null, RESOURCE_TYPE varchar2(40 char) not null, RES_ID varchar2(256 char) not null, SUMMARY_MESSAGE varchar2(4000 char) not null, primary key (RES_VER, RES_ID));
create table HFJ_SPIDX_COORDS (PARTITION_DATE date, PARTITION_ID number(10,0), SP_LATITUDE float(53), SP_LONGITUDE float(53), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_IDENTITY number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, primary key (SP_ID));
create table HFJ_SPIDX_DATE (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE_HIGH_DATE_ORDINAL number(10,0), SP_VALUE_LOW_DATE_ORDINAL number(10,0), HASH_IDENTITY number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), SP_VALUE_HIGH timestamp(6), SP_VALUE_LOW timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, primary key (SP_ID));
create table HFJ_SPIDX_NUMBER (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE number(38,2), HASH_IDENTITY number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, primary key (SP_ID));
create table HFJ_SPIDX_QUANTITY (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE float(53), HASH_IDENTITY number(19,0), HASH_IDENTITY_AND_UNITS number(19,0), HASH_IDENTITY_SYS_UNITS number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_SYSTEM varchar2(200 char), SP_UNITS varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_QUANTITY_NRML (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE float(53), HASH_IDENTITY number(19,0), HASH_IDENTITY_AND_UNITS number(19,0), HASH_IDENTITY_SYS_UNITS number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_SYSTEM varchar2(200 char), SP_UNITS varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_STRING (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_EXACT number(19,0), HASH_IDENTITY number(19,0), HASH_NORM_PREFIX number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_VALUE_EXACT varchar2(200 char), SP_VALUE_NORMALIZED varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_TOKEN (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_IDENTITY number(19,0), HASH_SYS number(19,0), HASH_SYS_AND_VALUE number(19,0), HASH_VALUE number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_SYSTEM varchar2(200 char), SP_VALUE varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_URI (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_IDENTITY number(19,0), HASH_URI number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_URI varchar2(500 char), primary key (SP_ID), constraint IDX_SP_URI_HASH_URI_V2 unique (HASH_URI, RES_ID, PARTITION_ID), constraint IDX_SP_URI_HASH_IDENTITY_V2 unique (HASH_IDENTITY, SP_URI, RES_ID, PARTITION_ID));
create table HFJ_TAG_DEF (TAG_TYPE number(3,0) not null check (TAG_TYPE between 0 and 2), TAG_USER_SELECTED number(1,0) check (TAG_USER_SELECTED in (0,1)), TAG_ID number(19,0) not null, TAG_VERSION varchar2(30 char), TAG_CODE varchar2(200 char), TAG_DISPLAY varchar2(200 char), TAG_SYSTEM varchar2(200 char), primary key (TAG_ID));
create index IDX_FORCEID_FID on HFJ_FORCED_ID (FORCED_ID);
create index IDX_RESHISTTAG_RESID on HFJ_HISTORY_TAG (RES_ID);
create index IDX_IDXCMBTOKNU_STR on HFJ_IDX_CMB_TOK_NU (IDX_STRING);
create index IDX_IDXCMBTOKNU_RES on HFJ_IDX_CMB_TOK_NU (RES_ID);
create index IDX_IDXCMPSTRUNIQ_RESOURCE on HFJ_IDX_CMP_STRING_UNIQ (RES_ID);
create index IDX_RL_SRC on HFJ_RES_LINK (SRC_RESOURCE_ID);
create index IDX_RL_TGT_v2 on HFJ_RES_LINK (TARGET_RESOURCE_ID, SRC_PATH, SRC_RESOURCE_ID, TARGET_RESOURCE_TYPE, PARTITION_ID);
create index IDX_RESPARMPRESENT_RESID on HFJ_RES_PARAM_PRESENT (RES_ID);
create index IDX_RESPARMPRESENT_HASHPRES on HFJ_RES_PARAM_PRESENT (HASH_PRESENCE);
create index IDX_RESSEARCHURL_RES on HFJ_RES_SEARCH_URL (RES_ID);
create index IDX_RESSEARCHURL_TIME on HFJ_RES_SEARCH_URL (CREATED_TIME);
create index IDX_RES_TAG_RES_TAG on HFJ_RES_TAG (RES_ID, TAG_ID, PARTITION_ID);
create index IDX_RES_TAG_TAG_RES on HFJ_RES_TAG (TAG_ID, RES_ID, PARTITION_ID);
create index IDX_RESVER_TYPE_DATE on HFJ_RES_VER (RES_TYPE, RES_UPDATED);
create index IDX_RESVER_ID_DATE on HFJ_RES_VER (RES_ID, RES_UPDATED);
create index IDX_RESVER_DATE on HFJ_RES_VER (RES_UPDATED);
create index IDX_RESVERPROV_SOURCEURI on HFJ_RES_VER_PROV (SOURCE_URI);
create index IDX_RESVERPROV_REQUESTID on HFJ_RES_VER_PROV (REQUEST_ID);
create index IDX_RESVERPROV_RES_PID on HFJ_RES_VER_PROV (RES_PID);
create index IDX_RES_DATE on HFJ_RESOURCE (RES_UPDATED);
create index IDX_RES_TYPE_DEL_UPDATED on HFJ_RESOURCE (RES_TYPE, RES_DELETED_AT, RES_UPDATED, PARTITION_ID, RES_ID);
create index IDX_RES_RESID_UPDATED on HFJ_RESOURCE (RES_ID, RES_UPDATED, PARTITION_ID);
create index IDX_SP_COORDS_HASH_V2 on HFJ_SPIDX_COORDS (HASH_IDENTITY, SP_LATITUDE, SP_LONGITUDE, RES_ID, PARTITION_ID);
create index IDX_SP_COORDS_UPDATED on HFJ_SPIDX_COORDS (SP_UPDATED);
create index IDX_SP_COORDS_RESID on HFJ_SPIDX_COORDS (RES_ID);
create index IDX_SP_DATE_HASH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_LOW, SP_VALUE_HIGH, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_HASH_HIGH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_HIGH, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_ORD_HASH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_LOW_DATE_ORDINAL, SP_VALUE_HIGH_DATE_ORDINAL, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_ORD_HASH_HIGH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_HIGH_DATE_ORDINAL, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_RESID_V2 on HFJ_SPIDX_DATE (RES_ID, HASH_IDENTITY, SP_VALUE_LOW, SP_VALUE_HIGH, SP_VALUE_LOW_DATE_ORDINAL, SP_VALUE_HIGH_DATE_ORDINAL, PARTITION_ID);
create index IDX_SP_NUMBER_HASH_VAL_V2 on HFJ_SPIDX_NUMBER (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_NUMBER_RESID_V2 on HFJ_SPIDX_NUMBER (RES_ID, HASH_IDENTITY, SP_VALUE, PARTITION_ID);
create index IDX_SP_QUANTITY_HASH_V2 on HFJ_SPIDX_QUANTITY (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QUANTITY_HASH_UN_V2 on HFJ_SPIDX_QUANTITY (HASH_IDENTITY_AND_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QUANTITY_HASH_SYSUN_V2 on HFJ_SPIDX_QUANTITY (HASH_IDENTITY_SYS_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QUANTITY_RESID_V2 on HFJ_SPIDX_QUANTITY (RES_ID, HASH_IDENTITY, HASH_IDENTITY_SYS_UNITS, HASH_IDENTITY_AND_UNITS, SP_VALUE, PARTITION_ID);
create index IDX_SP_QNTY_NRML_HASH_V2 on HFJ_SPIDX_QUANTITY_NRML (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QNTY_NRML_HASH_UN_V2 on HFJ_SPIDX_QUANTITY_NRML (HASH_IDENTITY_AND_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QNTY_NRML_HASH_SYSUN_V2 on HFJ_SPIDX_QUANTITY_NRML (HASH_IDENTITY_SYS_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QNTY_NRML_RESID_V2 on HFJ_SPIDX_QUANTITY_NRML (RES_ID, HASH_IDENTITY, HASH_IDENTITY_SYS_UNITS, HASH_IDENTITY_AND_UNITS, SP_VALUE, PARTITION_ID);
create index IDX_SP_STRING_HASH_IDENT_V2 on HFJ_SPIDX_STRING (HASH_IDENTITY, RES_ID, PARTITION_ID);
create index IDX_SP_STRING_HASH_NRM_V2 on HFJ_SPIDX_STRING (HASH_NORM_PREFIX, SP_VALUE_NORMALIZED, RES_ID, PARTITION_ID);
create index IDX_SP_STRING_HASH_EXCT_V2 on HFJ_SPIDX_STRING (HASH_EXACT, RES_ID, PARTITION_ID);
create index IDX_SP_STRING_RESID_V2 on HFJ_SPIDX_STRING (RES_ID, HASH_NORM_PREFIX, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_V2 on HFJ_SPIDX_TOKEN (HASH_IDENTITY, SP_SYSTEM, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_S_V2 on HFJ_SPIDX_TOKEN (HASH_SYS, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_SV_V2 on HFJ_SPIDX_TOKEN (HASH_SYS_AND_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_V_V2 on HFJ_SPIDX_TOKEN (HASH_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_RESID_V2 on HFJ_SPIDX_TOKEN (RES_ID, HASH_SYS_AND_VALUE, HASH_VALUE, HASH_SYS, HASH_IDENTITY, PARTITION_ID);
create index IDX_SP_URI_COORDS on HFJ_SPIDX_URI (RES_ID);
create index IDX_TAG_DEF_TP_CD_SYS on HFJ_TAG_DEF (TAG_TYPE, TAG_CODE, TAG_SYSTEM, TAG_ID, TAG_VERSION, TAG_USER_SELECTED);
alter table HFJ_FORCED_ID add constraint FK_FORCEDID_RESOURCE foreign key (RESOURCE_PID) references HFJ_RESOURCE;
alter table HFJ_HISTORY_TAG add constraint FKtderym7awj6q8iq5c51xv4ndw foreign key (TAG_ID) references HFJ_TAG_DEF;
alter table HFJ_HISTORY_TAG add constraint FK_HISTORYTAG_HISTORY foreign key (RES_VER_PID) references HFJ_RES_VER;
alter table HFJ_IDX_CMB_TOK_NU add constraint FK_IDXCMBTOKNU_RES_ID foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_IDX_CMP_STRING_UNIQ add constraint FK_IDXCMPSTRUNIQ_RES_ID foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_LINK add constraint FK_RESLINK_SOURCE foreign key (SRC_RESOURCE_ID) references HFJ_RESOURCE;
alter table HFJ_RES_LINK add constraint FK_RESLINK_TARGET foreign key (TARGET_RESOURCE_ID) references HFJ_RESOURCE;
alter table HFJ_RES_PARAM_PRESENT add constraint FK_RESPARMPRES_RESID foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_TAG add constraint FKbfcjbaftmiwr3rxkwsy23vneo foreign key (TAG_ID) references HFJ_TAG_DEF;
alter table HFJ_RES_TAG add constraint FK_RESTAG_RESOURCE foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_VER add constraint FK_RESOURCE_HISTORY_RESOURCE foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_VER_PROV add constraint FK_RESVERPROV_RES_PID foreign key (RES_PID) references HFJ_RESOURCE;
alter table HFJ_RES_VER_PROV add constraint FK_RESVERPROV_RESVER_PID foreign key (RES_VER_PID) references HFJ_RES_VER;
alter table HFJ_SPIDX_COORDS add constraint FKC97MPK37OKWU8QVTCEG2NH9VN foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_DATE add constraint FK_SP_DATE_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_NUMBER add constraint FK_SP_NUMBER_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_QUANTITY add constraint FK_SP_QUANTITY_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_QUANTITY_NRML add constraint FK_SP_QUANTITYNM_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_STRING add constraint FK_SPIDXSTR_RESOURCE foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_TOKEN add constraint FK_SP_TOKEN_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_URI add constraint FKGXSREUTYMMFJUWDSWV3Y887DO foreign key (RES_ID) references HFJ_RESOURCE;
create sequence SEQ_FORCEDID_ID start with 1 increment by 50;
create sequence SEQ_HISTORYTAG_ID start with 1 increment by 50;
create sequence SEQ_IDXCMBTOKNU_ID start with 1 increment by 50;
create sequence SEQ_IDXCMPSTRUNIQ_ID start with 1 increment by 50;
create sequence SEQ_RESLINK_ID start with 1 increment by 50;
create sequence SEQ_RESOURCE_HISTORY_ID start with 1 increment by 50;
create sequence SEQ_RESOURCE_ID start with 1 increment by 50;
create sequence SEQ_RESPARMPRESENT_ID start with 1 increment by 50;
create sequence SEQ_RESTAG_ID start with 1 increment by 50;
create sequence SEQ_SPIDX_COORDS start with 1 increment by 50;
create sequence SEQ_SPIDX_DATE start with 1 increment by 50;
create sequence SEQ_SPIDX_NUMBER start with 1 increment by 50;
create sequence SEQ_SPIDX_QUANTITY start with 1 increment by 50;
create sequence SEQ_SPIDX_QUANTITY_NRML start with 1 increment by 50;
create sequence SEQ_SPIDX_STRING start with 1 increment by 50;
create sequence SEQ_SPIDX_TOKEN start with 1 increment by 50;
create sequence SEQ_SPIDX_URI start with 1 increment by 50;
create sequence SEQ_TAGDEF_ID start with 1 increment by 50;
create table HFJ_FORCED_ID (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RESOURCE_PID number(19,0) not null, FORCED_ID varchar2(100 char) not null, RESOURCE_TYPE varchar2(100 char) default '', primary key (PID), constraint IDX_FORCEDID_RESID unique (RESOURCE_PID), constraint IDX_FORCEDID_TYPE_FID unique (RESOURCE_TYPE, FORCED_ID));
create table HFJ_HISTORY_TAG (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RES_ID number(19,0) not null, RES_VER_PID number(19,0) not null, TAG_ID number(19,0), RES_TYPE varchar2(40 char) not null, primary key (PID), constraint IDX_RESHISTTAG_TAGID unique (RES_VER_PID, TAG_ID));
create table HFJ_IDX_CMB_TOK_NU (PARTITION_DATE date, PARTITION_ID number(10,0), HASH_COMPLETE number(19,0) not null, PID number(19,0) not null, RES_ID number(19,0), IDX_STRING varchar2(500 char) not null, primary key (PID));
create table HFJ_IDX_CMP_STRING_UNIQ (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RES_ID number(19,0), IDX_STRING varchar2(500 char) not null, primary key (PID), constraint IDX_IDXCMPSTRUNIQ_STRING unique (IDX_STRING));
create table HFJ_RES_LINK (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, SP_UPDATED timestamp(6), SRC_RESOURCE_ID number(19,0) not null, TARGET_RESOURCE_ID number(19,0), TARGET_RESOURCE_VERSION number(19,0), SOURCE_RESOURCE_TYPE varchar2(40 char) not null, TARGET_RESOURCE_TYPE varchar2(40 char) not null, TARGET_RESOURCE_URL varchar2(200 char), SRC_PATH varchar2(500 char) not null, primary key (PID));
create table HFJ_RES_PARAM_PRESENT (PARTITION_DATE date, PARTITION_ID number(10,0), SP_PRESENT number(1,0) not null check (SP_PRESENT in (0,1)), HASH_PRESENCE number(19,0), PID number(19,0) not null, RES_ID number(19,0) not null, primary key (PID));
create table HFJ_RES_SEARCH_URL (CREATED_TIME timestamp(6) not null, RES_ID number(19,0) not null, RES_SEARCH_URL varchar2(768 char) not null, primary key (RES_SEARCH_URL));
create table HFJ_RES_TAG (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RES_ID number(19,0), TAG_ID number(19,0), RES_TYPE varchar2(40 char) not null, primary key (PID), constraint IDX_RESTAG_TAGID unique (RES_ID, TAG_ID));
create table HFJ_RES_VER (HAS_TAGS number(1,0) not null check (HAS_TAGS in (0,1)), PARTITION_DATE date, PARTITION_ID number(10,0), RES_ENCODING varchar2(5 char) not null check (RES_ENCODING in ('JSON','JSONC','DEL','ESR')), RES_VERSION varchar2(7 char) check (RES_VERSION in ('DSTU2','DSTU2_HL7ORG','DSTU2_1','DSTU3','R4','R4B','R5')), PID number(19,0) not null, RES_DELETED_AT timestamp(6), RES_ID number(19,0) not null, RES_PUBLISHED timestamp(6) not null, RES_UPDATED timestamp(6) not null, RES_VER number(19,0) not null, REQUEST_ID varchar2(16 char), RES_TYPE varchar2(40 char) not null, SOURCE_URI varchar2(100 char), RES_TEXT_VC clob, RES_TEXT blob, primary key (PID), constraint IDX_RESVER_ID_VER unique (RES_ID, RES_VER));
create table HFJ_RES_VER_PROV (PARTITION_DATE date, PARTITION_ID number(10,0), RES_PID number(19,0) not null, RES_VER_PID number(19,0) not null, REQUEST_ID varchar2(16 char), SOURCE_URI varchar2(100 char), primary key (RES_VER_PID));
create table HFJ_RESOURCE (HAS_TAGS number(1,0) not null check (HAS_TAGS in (0,1)), PARTITION_DATE date, PARTITION_ID number(10,0), SEARCH_URL_PRESENT number(1,0) check (SEARCH_URL_PRESENT in (0,1)), SP_CMPSTR_UNIQ_PRESENT number(1,0) check (SP_CMPSTR_UNIQ_PRESENT in (0,1)), SP_CMPTOKS_PRESENT number(1,0) check (SP_CMPTOKS_PRESENT in (0,1)), SP_COORDS_PRESENT number(1,0) check (SP_COORDS_PRESENT in (0,1)), SP_DATE_PRESENT number(1,0) check (SP_DATE_PRESENT in (0,1)), SP_HAS_LINKS number(1,0) check (SP_HAS_LINKS in (0,1)), SP_NUMBER_PRESENT number(1,0) check (SP_NUMBER_PRESENT in (0,1)), SP_QUANTITY_NRML_PRESENT number(1,0) check (SP_QUANTITY_NRML_PRESENT in (0,1)), SP_QUANTITY_PRESENT number(1,0) check (SP_QUANTITY_PRESENT in (0,1)), SP_STRING_PRESENT number(1,0) check (SP_STRING_PRESENT in (0,1)), SP_TOKEN_PRESENT number(1,0) check (SP_TOKEN_PRESENT in (0,1)), SP_URI_PRESENT number(1,0) check (SP_URI_PRESENT in (0,1)), RES_VERSION varchar2(7 char) check (RES_VERSION in ('DSTU2','DSTU2_HL7ORG','DSTU2_1','DSTU3','R4','R4B','R5')), RES_DELETED_AT timestamp(6), RES_ID number(19,0) not null, RES_PUBLISHED timestamp(6) not null, RES_UPDATED timestamp(6) not null, RES_VER number(19,0), SP_INDEX_STATUS number(19,0), RES_LANGUAGE varchar2(20 char), RES_TYPE varchar2(40 char) not null, FHIR_ID varchar2(64 char), HASH_SHA256 varchar2(64 char), primary key (RES_ID));
create table HFJ_RESOURCE_MODIFIED (CREATED_TIME timestamp(6) not null, RES_VER varchar2(8 char) not null, RESOURCE_TYPE varchar2(40 char) not null, RES_ID varchar2(256 char) not null, SUMMARY_MESSAGE varchar2(4000 char) not null, primary key (RES_VER, RES_ID));
create table HFJ_SPIDX_COORDS (PARTITION_DATE date, PARTITION_ID number(10,0), SP_LATITUDE float(53), SP_LONGITUDE float(53), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_IDENTITY number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, primary key (SP_ID));
create table HFJ_SPIDX_DATE (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE_HIGH_DATE_ORDINAL number(10,0), SP_VALUE_LOW_DATE_ORDINAL number(10,0), HASH_IDENTITY number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), SP_VALUE_HIGH timestamp(6), SP_VALUE_LOW timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, primary key (SP_ID));
create table HFJ_SPIDX_NUMBER (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE number(38,2), HASH_IDENTITY number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, primary key (SP_ID));
create table HFJ_SPIDX_QUANTITY (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE float(53), HASH_IDENTITY number(19,0), HASH_IDENTITY_AND_UNITS number(19,0), HASH_IDENTITY_SYS_UNITS number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_SYSTEM varchar2(200 char), SP_UNITS varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_QUANTITY_NRML (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE float(53), HASH_IDENTITY number(19,0), HASH_IDENTITY_AND_UNITS number(19,0), HASH_IDENTITY_SYS_UNITS number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_SYSTEM varchar2(200 char), SP_UNITS varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_STRING (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_EXACT number(19,0), HASH_IDENTITY number(19,0), HASH_NORM_PREFIX number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_VALUE_EXACT varchar2(200 char), SP_VALUE_NORMALIZED varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_TOKEN (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_IDENTITY number(19,0), HASH_SYS number(19,0), HASH_SYS_AND_VALUE number(19,0), HASH_VALUE number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_SYSTEM varchar2(200 char), SP_VALUE varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_URI (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_IDENTITY number(19,0), HASH_URI number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_URI varchar2(500 char), primary key (SP_ID), constraint IDX_SP_URI_HASH_URI_V2 unique (HASH_URI, RES_ID, PARTITION_ID), constraint IDX_SP_URI_HASH_IDENTITY_V2 unique (HASH_IDENTITY, SP_URI, RES_ID, PARTITION_ID));
create table HFJ_TAG_DEF (TAG_TYPE number(3,0) not null check (TAG_TYPE between 0 and 2), TAG_USER_SELECTED number(1,0) check (TAG_USER_SELECTED in (0,1)), TAG_ID number(19,0) not null, TAG_VERSION varchar2(30 char), TAG_CODE varchar2(200 char), TAG_DISPLAY varchar2(200 char), TAG_SYSTEM varchar2(200 char), primary key (TAG_ID));
create index IDX_FORCEID_FID on HFJ_FORCED_ID (FORCED_ID);
create index IDX_RESHISTTAG_RESID on HFJ_HISTORY_TAG (RES_ID);
create index IDX_IDXCMBTOKNU_STR on HFJ_IDX_CMB_TOK_NU (IDX_STRING);
create index IDX_IDXCMBTOKNU_RES on HFJ_IDX_CMB_TOK_NU (RES_ID);
create index IDX_IDXCMPSTRUNIQ_RESOURCE on HFJ_IDX_CMP_STRING_UNIQ (RES_ID);
create index IDX_RL_SRC on HFJ_RES_LINK (SRC_RESOURCE_ID);
create index IDX_RL_TGT_v2 on HFJ_RES_LINK (TARGET_RESOURCE_ID, SRC_PATH, SRC_RESOURCE_ID, TARGET_RESOURCE_TYPE, PARTITION_ID);
create index IDX_RESPARMPRESENT_RESID on HFJ_RES_PARAM_PRESENT (RES_ID);
create index IDX_RESPARMPRESENT_HASHPRES on HFJ_RES_PARAM_PRESENT (HASH_PRESENCE);
create index IDX_RESSEARCHURL_RES on HFJ_RES_SEARCH_URL (RES_ID);
create index IDX_RESSEARCHURL_TIME on HFJ_RES_SEARCH_URL (CREATED_TIME);
create index IDX_RES_TAG_RES_TAG on HFJ_RES_TAG (RES_ID, TAG_ID, PARTITION_ID);
create index IDX_RES_TAG_TAG_RES on HFJ_RES_TAG (TAG_ID, RES_ID, PARTITION_ID);
create index IDX_RESVER_TYPE_DATE on HFJ_RES_VER (RES_TYPE, RES_UPDATED);
create index IDX_RESVER_ID_DATE on HFJ_RES_VER (RES_ID, RES_UPDATED);
create index IDX_RESVER_DATE on HFJ_RES_VER (RES_UPDATED);
create index IDX_RESVERPROV_SOURCEURI on HFJ_RES_VER_PROV (SOURCE_URI);
create index IDX_RESVERPROV_REQUESTID on HFJ_RES_VER_PROV (REQUEST_ID);
create index IDX_RESVERPROV_RES_PID on HFJ_RES_VER_PROV (RES_PID);
create index IDX_RES_DATE on HFJ_RESOURCE (RES_UPDATED);
create index IDX_RES_TYPE_DEL_UPDATED on HFJ_RESOURCE (RES_TYPE, RES_DELETED_AT, RES_UPDATED, PARTITION_ID, RES_ID);
create index IDX_RES_RESID_UPDATED on HFJ_RESOURCE (RES_ID, RES_UPDATED, PARTITION_ID);
create index IDX_SP_COORDS_HASH_V2 on HFJ_SPIDX_COORDS (HASH_IDENTITY, SP_LATITUDE, SP_LONGITUDE, RES_ID, PARTITION_ID);
create index IDX_SP_COORDS_UPDATED on HFJ_SPIDX_COORDS (SP_UPDATED);
create index IDX_SP_COORDS_RESID on HFJ_SPIDX_COORDS (RES_ID);
create index IDX_SP_DATE_HASH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_LOW, SP_VALUE_HIGH, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_HASH_HIGH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_HIGH, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_ORD_HASH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_LOW_DATE_ORDINAL, SP_VALUE_HIGH_DATE_ORDINAL, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_ORD_HASH_HIGH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_HIGH_DATE_ORDINAL, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_RESID_V2 on HFJ_SPIDX_DATE (RES_ID, HASH_IDENTITY, SP_VALUE_LOW, SP_VALUE_HIGH, SP_VALUE_LOW_DATE_ORDINAL, SP_VALUE_HIGH_DATE_ORDINAL, PARTITION_ID);
create index IDX_SP_NUMBER_HASH_VAL_V2 on HFJ_SPIDX_NUMBER (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_NUMBER_RESID_V2 on HFJ_SPIDX_NUMBER (RES_ID, HASH_IDENTITY, SP_VALUE, PARTITION_ID);
create index IDX_SP_QUANTITY_HASH_V2 on HFJ_SPIDX_QUANTITY (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QUANTITY_HASH_UN_V2 on HFJ_SPIDX_QUANTITY (HASH_IDENTITY_AND_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QUANTITY_HASH_SYSUN_V2 on HFJ_SPIDX_QUANTITY (HASH_IDENTITY_SYS_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QUANTITY_RESID_V2 on HFJ_SPIDX_QUANTITY (RES_ID, HASH_IDENTITY, HASH_IDENTITY_SYS_UNITS, HASH_IDENTITY_AND_UNITS, SP_VALUE, PARTITION_ID);
create index IDX_SP_QNTY_NRML_HASH_V2 on HFJ_SPIDX_QUANTITY_NRML (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QNTY_NRML_HASH_UN_V2 on HFJ_SPIDX_QUANTITY_NRML (HASH_IDENTITY_AND_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QNTY_NRML_HASH_SYSUN_V2 on HFJ_SPIDX_QUANTITY_NRML (HASH_IDENTITY_SYS_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QNTY_NRML_RESID_V2 on HFJ_SPIDX_QUANTITY_NRML (RES_ID, HASH_IDENTITY, HASH_IDENTITY_SYS_UNITS, HASH_IDENTITY_AND_UNITS, SP_VALUE, PARTITION_ID);
create index IDX_SP_STRING_HASH_IDENT_V2 on HFJ_SPIDX_STRING (HASH_IDENTITY, RES_ID, PARTITION_ID);
create index IDX_SP_STRING_HASH_NRM_V2 on HFJ_SPIDX_STRING (HASH_NORM_PREFIX, SP_VALUE_NORMALIZED, RES_ID, PARTITION_ID);
create index IDX_SP_STRING_HASH_EXCT_V2 on HFJ_SPIDX_STRING (HASH_EXACT, RES_ID, PARTITION_ID);
create index IDX_SP_STRING_RESID_V2 on HFJ_SPIDX_STRING (RES_ID, HASH_NORM_PREFIX, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_V2 on HFJ_SPIDX_TOKEN (HASH_IDENTITY, SP_SYSTEM, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_S_V2 on HFJ_SPIDX_TOKEN (HASH_SYS, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_SV_V2 on HFJ_SPIDX_TOKEN (HASH_SYS_AND_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_V_V2 on HFJ_SPIDX_TOKEN (HASH_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_RESID_V2 on HFJ_SPIDX_TOKEN (RES_ID, HASH_SYS_AND_VALUE, HASH_VALUE, HASH_SYS, HASH_IDENTITY, PARTITION_ID);
create index IDX_SP_URI_COORDS on HFJ_SPIDX_URI (RES_ID);
create index IDX_TAG_DEF_TP_CD_SYS on HFJ_TAG_DEF (TAG_TYPE, TAG_CODE, TAG_SYSTEM, TAG_ID, TAG_VERSION, TAG_USER_SELECTED);
alter table HFJ_FORCED_ID add constraint FK_FORCEDID_RESOURCE foreign key (RESOURCE_PID) references HFJ_RESOURCE;
alter table HFJ_HISTORY_TAG add constraint FKtderym7awj6q8iq5c51xv4ndw foreign key (TAG_ID) references HFJ_TAG_DEF;
alter table HFJ_HISTORY_TAG add constraint FK_HISTORYTAG_HISTORY foreign key (RES_VER_PID) references HFJ_RES_VER;
alter table HFJ_IDX_CMB_TOK_NU add constraint FK_IDXCMBTOKNU_RES_ID foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_IDX_CMP_STRING_UNIQ add constraint FK_IDXCMPSTRUNIQ_RES_ID foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_LINK add constraint FK_RESLINK_SOURCE foreign key (SRC_RESOURCE_ID) references HFJ_RESOURCE;
alter table HFJ_RES_LINK add constraint FK_RESLINK_TARGET foreign key (TARGET_RESOURCE_ID) references HFJ_RESOURCE;
alter table HFJ_RES_PARAM_PRESENT add constraint FK_RESPARMPRES_RESID foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_TAG add constraint FKbfcjbaftmiwr3rxkwsy23vneo foreign key (TAG_ID) references HFJ_TAG_DEF;
alter table HFJ_RES_TAG add constraint FK_RESTAG_RESOURCE foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_VER add constraint FK_RESOURCE_HISTORY_RESOURCE foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_VER_PROV add constraint FK_RESVERPROV_RES_PID foreign key (RES_PID) references HFJ_RESOURCE;
alter table HFJ_RES_VER_PROV add constraint FK_RESVERPROV_RESVER_PID foreign key (RES_VER_PID) references HFJ_RES_VER;
alter table HFJ_SPIDX_COORDS add constraint FKC97MPK37OKWU8QVTCEG2NH9VN foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_DATE add constraint FK_SP_DATE_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_NUMBER add constraint FK_SP_NUMBER_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_QUANTITY add constraint FK_SP_QUANTITY_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_QUANTITY_NRML add constraint FK_SP_QUANTITYNM_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_STRING add constraint FK_SPIDXSTR_RESOURCE foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_TOKEN add constraint FK_SP_TOKEN_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_URI add constraint FKGXSREUTYMMFJUWDSWV3Y887DO foreign key (RES_ID) references HFJ_RESOURCE;
create sequence SEQ_FORCEDID_ID start with 1 increment by 50;
create sequence SEQ_HISTORYTAG_ID start with 1 increment by 50;
create sequence SEQ_IDXCMBTOKNU_ID start with 1 increment by 50;
create sequence SEQ_IDXCMPSTRUNIQ_ID start with 1 increment by 50;
create sequence SEQ_RESLINK_ID start with 1 increment by 50;
create sequence SEQ_RESOURCE_HISTORY_ID start with 1 increment by 50;
create sequence SEQ_RESOURCE_ID start with 1 increment by 50;
create sequence SEQ_RESPARMPRESENT_ID start with 1 increment by 50;
create sequence SEQ_RESTAG_ID start with 1 increment by 50;
create sequence SEQ_SPIDX_COORDS start with 1 increment by 50;
create sequence SEQ_SPIDX_DATE start with 1 increment by 50;
create sequence SEQ_SPIDX_NUMBER start with 1 increment by 50;
create sequence SEQ_SPIDX_QUANTITY start with 1 increment by 50;
create sequence SEQ_SPIDX_QUANTITY_NRML start with 1 increment by 50;
create sequence SEQ_SPIDX_STRING start with 1 increment by 50;
create sequence SEQ_SPIDX_TOKEN start with 1 increment by 50;
create sequence SEQ_SPIDX_URI start with 1 increment by 50;
create sequence SEQ_TAGDEF_ID start with 1 increment by 50;
create table HFJ_FORCED_ID (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RESOURCE_PID number(19,0) not null, FORCED_ID varchar2(100 char) not null, RESOURCE_TYPE varchar2(100 char) default '', primary key (PID), constraint IDX_FORCEDID_RESID unique (RESOURCE_PID), constraint IDX_FORCEDID_TYPE_FID unique (RESOURCE_TYPE, FORCED_ID));
create table HFJ_HISTORY_TAG (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RES_ID number(19,0) not null, RES_VER_PID number(19,0) not null, TAG_ID number(19,0), RES_TYPE varchar2(40 char) not null, primary key (PID), constraint IDX_RESHISTTAG_TAGID unique (RES_VER_PID, TAG_ID));
create table HFJ_IDX_CMB_TOK_NU (PARTITION_DATE date, PARTITION_ID number(10,0), HASH_COMPLETE number(19,0) not null, PID number(19,0) not null, RES_ID number(19,0), IDX_STRING varchar2(500 char) not null, primary key (PID));
create table HFJ_IDX_CMP_STRING_UNIQ (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RES_ID number(19,0), IDX_STRING varchar2(500 char) not null, primary key (PID), constraint IDX_IDXCMPSTRUNIQ_STRING unique (IDX_STRING));
create table HFJ_RES_LINK (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, SP_UPDATED timestamp(6), SRC_RESOURCE_ID number(19,0) not null, TARGET_RESOURCE_ID number(19,0), TARGET_RESOURCE_VERSION number(19,0), SOURCE_RESOURCE_TYPE varchar2(40 char) not null, TARGET_RESOURCE_TYPE varchar2(40 char) not null, TARGET_RESOURCE_URL varchar2(200 char), SRC_PATH varchar2(500 char) not null, primary key (PID));
create table HFJ_RES_PARAM_PRESENT (PARTITION_DATE date, PARTITION_ID number(10,0), SP_PRESENT number(1,0) not null check (SP_PRESENT in (0,1)), HASH_PRESENCE number(19,0), PID number(19,0) not null, RES_ID number(19,0) not null, primary key (PID));
create table HFJ_RES_SEARCH_URL (CREATED_TIME timestamp(6) not null, RES_ID number(19,0) not null, RES_SEARCH_URL varchar2(768 char) not null, primary key (RES_SEARCH_URL));
create table HFJ_RES_TAG (PARTITION_DATE date, PARTITION_ID number(10,0), PID number(19,0) not null, RES_ID number(19,0), TAG_ID number(19,0), RES_TYPE varchar2(40 char) not null, primary key (PID), constraint IDX_RESTAG_TAGID unique (RES_ID, TAG_ID));
create table HFJ_RES_VER (HAS_TAGS number(1,0) not null check (HAS_TAGS in (0,1)), PARTITION_DATE date, PARTITION_ID number(10,0), RES_ENCODING varchar2(5 char) not null check (RES_ENCODING in ('JSON','JSONC','DEL','ESR')), RES_VERSION varchar2(7 char) check (RES_VERSION in ('DSTU2','DSTU2_HL7ORG','DSTU2_1','DSTU3','R4','R4B','R5')), PID number(19,0) not null, RES_DELETED_AT timestamp(6), RES_ID number(19,0) not null, RES_PUBLISHED timestamp(6) not null, RES_UPDATED timestamp(6) not null, RES_VER number(19,0) not null, REQUEST_ID varchar2(16 char), RES_TYPE varchar2(40 char) not null, SOURCE_URI varchar2(100 char), RES_TEXT_VC clob, RES_TEXT blob, primary key (PID), constraint IDX_RESVER_ID_VER unique (RES_ID, RES_VER));
create table HFJ_RES_VER_PROV (PARTITION_DATE date, PARTITION_ID number(10,0), RES_PID number(19,0) not null, RES_VER_PID number(19,0) not null, REQUEST_ID varchar2(16 char), SOURCE_URI varchar2(100 char), primary key (RES_VER_PID));
create table HFJ_RESOURCE (HAS_TAGS number(1,0) not null check (HAS_TAGS in (0,1)), PARTITION_DATE date, PARTITION_ID number(10,0), SEARCH_URL_PRESENT number(1,0) check (SEARCH_URL_PRESENT in (0,1)), SP_CMPSTR_UNIQ_PRESENT number(1,0) check (SP_CMPSTR_UNIQ_PRESENT in (0,1)), SP_CMPTOKS_PRESENT number(1,0) check (SP_CMPTOKS_PRESENT in (0,1)), SP_COORDS_PRESENT number(1,0) check (SP_COORDS_PRESENT in (0,1)), SP_DATE_PRESENT number(1,0) check (SP_DATE_PRESENT in (0,1)), SP_HAS_LINKS number(1,0) check (SP_HAS_LINKS in (0,1)), SP_NUMBER_PRESENT number(1,0) check (SP_NUMBER_PRESENT in (0,1)), SP_QUANTITY_NRML_PRESENT number(1,0) check (SP_QUANTITY_NRML_PRESENT in (0,1)), SP_QUANTITY_PRESENT number(1,0) check (SP_QUANTITY_PRESENT in (0,1)), SP_STRING_PRESENT number(1,0) check (SP_STRING_PRESENT in (0,1)), SP_TOKEN_PRESENT number(1,0) check (SP_TOKEN_PRESENT in (0,1)), SP_URI_PRESENT number(1,0) check (SP_URI_PRESENT in (0,1)), RES_VERSION varchar2(7 char) check (RES_VERSION in ('DSTU2','DSTU2_HL7ORG','DSTU2_1','DSTU3','R4','R4B','R5')), RES_DELETED_AT timestamp(6), RES_ID number(19,0) not null, RES_PUBLISHED timestamp(6) not null, RES_UPDATED timestamp(6) not null, RES_VER number(19,0), SP_INDEX_STATUS number(19,0), RES_LANGUAGE varchar2(20 char), RES_TYPE varchar2(40 char) not null, FHIR_ID varchar2(64 char), HASH_SHA256 varchar2(64 char), primary key (RES_ID));
create table HFJ_RESOURCE_MODIFIED (CREATED_TIME timestamp(6) not null, RES_VER varchar2(8 char) not null, RESOURCE_TYPE varchar2(40 char) not null, RES_ID varchar2(256 char) not null, SUMMARY_MESSAGE varchar2(4000 char) not null, primary key (RES_VER, RES_ID));
create table HFJ_SPIDX_COORDS (PARTITION_DATE date, PARTITION_ID number(10,0), SP_LATITUDE float(53), SP_LONGITUDE float(53), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_IDENTITY number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, primary key (SP_ID));
create table HFJ_SPIDX_DATE (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE_HIGH_DATE_ORDINAL number(10,0), SP_VALUE_LOW_DATE_ORDINAL number(10,0), HASH_IDENTITY number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), SP_VALUE_HIGH timestamp(6), SP_VALUE_LOW timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, primary key (SP_ID));
create table HFJ_SPIDX_NUMBER (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE number(38,2), HASH_IDENTITY number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, primary key (SP_ID));
create table HFJ_SPIDX_QUANTITY (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE float(53), HASH_IDENTITY number(19,0), HASH_IDENTITY_AND_UNITS number(19,0), HASH_IDENTITY_SYS_UNITS number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_SYSTEM varchar2(200 char), SP_UNITS varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_QUANTITY_NRML (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), SP_VALUE float(53), HASH_IDENTITY number(19,0), HASH_IDENTITY_AND_UNITS number(19,0), HASH_IDENTITY_SYS_UNITS number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_SYSTEM varchar2(200 char), SP_UNITS varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_STRING (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_EXACT number(19,0), HASH_IDENTITY number(19,0), HASH_NORM_PREFIX number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_VALUE_EXACT varchar2(200 char), SP_VALUE_NORMALIZED varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_TOKEN (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_IDENTITY number(19,0), HASH_SYS number(19,0), HASH_SYS_AND_VALUE number(19,0), HASH_VALUE number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_SYSTEM varchar2(200 char), SP_VALUE varchar2(200 char), primary key (SP_ID));
create table HFJ_SPIDX_URI (PARTITION_DATE date, PARTITION_ID number(10,0), SP_MISSING number(1,0) not null check (SP_MISSING in (0,1)), HASH_IDENTITY number(19,0), HASH_URI number(19,0), RES_ID number(19,0) not null, SP_ID number(19,0) not null, SP_UPDATED timestamp(6), RES_TYPE varchar2(100 char) not null, SP_NAME varchar2(100 char) not null, SP_URI varchar2(500 char), primary key (SP_ID), constraint IDX_SP_URI_HASH_URI_V2 unique (HASH_URI, RES_ID, PARTITION_ID), constraint IDX_SP_URI_HASH_IDENTITY_V2 unique (HASH_IDENTITY, SP_URI, RES_ID, PARTITION_ID));
create table HFJ_TAG_DEF (TAG_TYPE number(3,0) not null check (TAG_TYPE between 0 and 2), TAG_USER_SELECTED number(1,0) check (TAG_USER_SELECTED in (0,1)), TAG_ID number(19,0) not null, TAG_VERSION varchar2(30 char), TAG_CODE varchar2(200 char), TAG_DISPLAY varchar2(200 char), TAG_SYSTEM varchar2(200 char), primary key (TAG_ID));
create index IDX_FORCEID_FID on HFJ_FORCED_ID (FORCED_ID);
create index IDX_RESHISTTAG_RESID on HFJ_HISTORY_TAG (RES_ID);
create index IDX_IDXCMBTOKNU_STR on HFJ_IDX_CMB_TOK_NU (IDX_STRING);
create index IDX_IDXCMBTOKNU_RES on HFJ_IDX_CMB_TOK_NU (RES_ID);
create index IDX_IDXCMPSTRUNIQ_RESOURCE on HFJ_IDX_CMP_STRING_UNIQ (RES_ID);
create index IDX_RL_SRC on HFJ_RES_LINK (SRC_RESOURCE_ID);
create index IDX_RL_TGT_v2 on HFJ_RES_LINK (TARGET_RESOURCE_ID, SRC_PATH, SRC_RESOURCE_ID, TARGET_RESOURCE_TYPE, PARTITION_ID);
create index IDX_RESPARMPRESENT_RESID on HFJ_RES_PARAM_PRESENT (RES_ID);
create index IDX_RESPARMPRESENT_HASHPRES on HFJ_RES_PARAM_PRESENT (HASH_PRESENCE);
create index IDX_RESSEARCHURL_RES on HFJ_RES_SEARCH_URL (RES_ID);
create index IDX_RESSEARCHURL_TIME on HFJ_RES_SEARCH_URL (CREATED_TIME);
create index IDX_RES_TAG_RES_TAG on HFJ_RES_TAG (RES_ID, TAG_ID, PARTITION_ID);
create index IDX_RES_TAG_TAG_RES on HFJ_RES_TAG (TAG_ID, RES_ID, PARTITION_ID);
create index IDX_RESVER_TYPE_DATE on HFJ_RES_VER (RES_TYPE, RES_UPDATED);
create index IDX_RESVER_ID_DATE on HFJ_RES_VER (RES_ID, RES_UPDATED);
create index IDX_RESVER_DATE on HFJ_RES_VER (RES_UPDATED);
create index IDX_RESVERPROV_SOURCEURI on HFJ_RES_VER_PROV (SOURCE_URI);
create index IDX_RESVERPROV_REQUESTID on HFJ_RES_VER_PROV (REQUEST_ID);
create index IDX_RESVERPROV_RES_PID on HFJ_RES_VER_PROV (RES_PID);
create index IDX_RES_DATE on HFJ_RESOURCE (RES_UPDATED);
create index IDX_RES_TYPE_DEL_UPDATED on HFJ_RESOURCE (RES_TYPE, RES_DELETED_AT, RES_UPDATED, PARTITION_ID, RES_ID);
create index IDX_RES_RESID_UPDATED on HFJ_RESOURCE (RES_ID, RES_UPDATED, PARTITION_ID);
create index IDX_SP_COORDS_HASH_V2 on HFJ_SPIDX_COORDS (HASH_IDENTITY, SP_LATITUDE, SP_LONGITUDE, RES_ID, PARTITION_ID);
create index IDX_SP_COORDS_UPDATED on HFJ_SPIDX_COORDS (SP_UPDATED);
create index IDX_SP_COORDS_RESID on HFJ_SPIDX_COORDS (RES_ID);
create index IDX_SP_DATE_HASH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_LOW, SP_VALUE_HIGH, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_HASH_HIGH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_HIGH, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_ORD_HASH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_LOW_DATE_ORDINAL, SP_VALUE_HIGH_DATE_ORDINAL, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_ORD_HASH_HIGH_V2 on HFJ_SPIDX_DATE (HASH_IDENTITY, SP_VALUE_HIGH_DATE_ORDINAL, RES_ID, PARTITION_ID);
create index IDX_SP_DATE_RESID_V2 on HFJ_SPIDX_DATE (RES_ID, HASH_IDENTITY, SP_VALUE_LOW, SP_VALUE_HIGH, SP_VALUE_LOW_DATE_ORDINAL, SP_VALUE_HIGH_DATE_ORDINAL, PARTITION_ID);
create index IDX_SP_NUMBER_HASH_VAL_V2 on HFJ_SPIDX_NUMBER (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_NUMBER_RESID_V2 on HFJ_SPIDX_NUMBER (RES_ID, HASH_IDENTITY, SP_VALUE, PARTITION_ID);
create index IDX_SP_QUANTITY_HASH_V2 on HFJ_SPIDX_QUANTITY (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QUANTITY_HASH_UN_V2 on HFJ_SPIDX_QUANTITY (HASH_IDENTITY_AND_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QUANTITY_HASH_SYSUN_V2 on HFJ_SPIDX_QUANTITY (HASH_IDENTITY_SYS_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QUANTITY_RESID_V2 on HFJ_SPIDX_QUANTITY (RES_ID, HASH_IDENTITY, HASH_IDENTITY_SYS_UNITS, HASH_IDENTITY_AND_UNITS, SP_VALUE, PARTITION_ID);
create index IDX_SP_QNTY_NRML_HASH_V2 on HFJ_SPIDX_QUANTITY_NRML (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QNTY_NRML_HASH_UN_V2 on HFJ_SPIDX_QUANTITY_NRML (HASH_IDENTITY_AND_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QNTY_NRML_HASH_SYSUN_V2 on HFJ_SPIDX_QUANTITY_NRML (HASH_IDENTITY_SYS_UNITS, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_QNTY_NRML_RESID_V2 on HFJ_SPIDX_QUANTITY_NRML (RES_ID, HASH_IDENTITY, HASH_IDENTITY_SYS_UNITS, HASH_IDENTITY_AND_UNITS, SP_VALUE, PARTITION_ID);
create index IDX_SP_STRING_HASH_IDENT_V2 on HFJ_SPIDX_STRING (HASH_IDENTITY, RES_ID, PARTITION_ID);
create index IDX_SP_STRING_HASH_NRM_V2 on HFJ_SPIDX_STRING (HASH_NORM_PREFIX, SP_VALUE_NORMALIZED, RES_ID, PARTITION_ID);
create index IDX_SP_STRING_HASH_EXCT_V2 on HFJ_SPIDX_STRING (HASH_EXACT, RES_ID, PARTITION_ID);
create index IDX_SP_STRING_RESID_V2 on HFJ_SPIDX_STRING (RES_ID, HASH_NORM_PREFIX, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_V2 on HFJ_SPIDX_TOKEN (HASH_IDENTITY, SP_SYSTEM, SP_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_S_V2 on HFJ_SPIDX_TOKEN (HASH_SYS, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_SV_V2 on HFJ_SPIDX_TOKEN (HASH_SYS_AND_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_HASH_V_V2 on HFJ_SPIDX_TOKEN (HASH_VALUE, RES_ID, PARTITION_ID);
create index IDX_SP_TOKEN_RESID_V2 on HFJ_SPIDX_TOKEN (RES_ID, HASH_SYS_AND_VALUE, HASH_VALUE, HASH_SYS, HASH_IDENTITY, PARTITION_ID);
create index IDX_SP_URI_COORDS on HFJ_SPIDX_URI (RES_ID);
create index IDX_TAG_DEF_TP_CD_SYS on HFJ_TAG_DEF (TAG_TYPE, TAG_CODE, TAG_SYSTEM, TAG_ID, TAG_VERSION, TAG_USER_SELECTED);
alter table HFJ_FORCED_ID add constraint FK_FORCEDID_RESOURCE foreign key (RESOURCE_PID) references HFJ_RESOURCE;
alter table HFJ_HISTORY_TAG add constraint FKtderym7awj6q8iq5c51xv4ndw foreign key (TAG_ID) references HFJ_TAG_DEF;
alter table HFJ_HISTORY_TAG add constraint FK_HISTORYTAG_HISTORY foreign key (RES_VER_PID) references HFJ_RES_VER;
alter table HFJ_IDX_CMB_TOK_NU add constraint FK_IDXCMBTOKNU_RES_ID foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_IDX_CMP_STRING_UNIQ add constraint FK_IDXCMPSTRUNIQ_RES_ID foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_LINK add constraint FK_RESLINK_SOURCE foreign key (SRC_RESOURCE_ID) references HFJ_RESOURCE;
alter table HFJ_RES_LINK add constraint FK_RESLINK_TARGET foreign key (TARGET_RESOURCE_ID) references HFJ_RESOURCE;
alter table HFJ_RES_PARAM_PRESENT add constraint FK_RESPARMPRES_RESID foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_TAG add constraint FKbfcjbaftmiwr3rxkwsy23vneo foreign key (TAG_ID) references HFJ_TAG_DEF;
alter table HFJ_RES_TAG add constraint FK_RESTAG_RESOURCE foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_VER add constraint FK_RESOURCE_HISTORY_RESOURCE foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_RES_VER_PROV add constraint FK_RESVERPROV_RES_PID foreign key (RES_PID) references HFJ_RESOURCE;
alter table HFJ_RES_VER_PROV add constraint FK_RESVERPROV_RESVER_PID foreign key (RES_VER_PID) references HFJ_RES_VER;
alter table HFJ_SPIDX_COORDS add constraint FKC97MPK37OKWU8QVTCEG2NH9VN foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_DATE add constraint FK_SP_DATE_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_NUMBER add constraint FK_SP_NUMBER_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_QUANTITY add constraint FK_SP_QUANTITY_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_QUANTITY_NRML add constraint FK_SP_QUANTITYNM_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_STRING add constraint FK_SPIDXSTR_RESOURCE foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_TOKEN add constraint FK_SP_TOKEN_RES foreign key (RES_ID) references HFJ_RESOURCE;
alter table HFJ_SPIDX_URI add constraint FKGXSREUTYMMFJUWDSWV3Y887DO foreign key (RES_ID) references HFJ_RESOURCE;
